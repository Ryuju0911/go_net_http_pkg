// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.
//go:generate bundle -o=h2_bundle.go -prefix=http2 ../golang.org/x/net/http2

package http

import ()

const (
	// NextProtoTLS is the NPN/ALPN protocol negotiated during
	// HTTP/2's TLS setup.
	http2NextProtoTLS = "h2"
)

// Server is an HTTP/2 server.
type http2Server struct {
	// // MaxHandlers limits the number of http.Handler ServeHTTP goroutines
	// // which may run at a time over all connections.
	// // Negative or zero no limit.
	// // TODO: implement
	// MaxHandlers int

	// // MaxConcurrentStreams optionally specifies the number of
	// // concurrent streams that each client may have open at a
	// // time. This is unrelated to the number of http.Handler goroutines
	// // which may be active globally, which is MaxHandlers.
	// // If zero, MaxConcurrentStreams defaults to at least 100, per
	// // the HTTP/2 spec's recommendations.
	// MaxConcurrentStreams uint32

	// // MaxDecoderHeaderTableSize optionally specifies the http2
	// // SETTINGS_HEADER_TABLE_SIZE to send in the initial settings frame. It
	// // informs the remote endpoint of the maximum size of the header compression
	// // table used to decode header blocks, in octets. If zero, the default value
	// // of 4096 is used.
	// MaxDecoderHeaderTableSize uint32

	// // MaxEncoderHeaderTableSize optionally specifies an upper limit for the
	// // header compression table used for encoding request headers. Received
	// // SETTINGS_HEADER_TABLE_SIZE settings are capped at this limit. If zero,
	// // the default value of 4096 is used.
	// MaxEncoderHeaderTableSize uint32

	// // MaxReadFrameSize optionally specifies the largest frame
	// // this server is willing to read. A valid value is between
	// // 16k and 16M, inclusive. If zero or otherwise invalid, a
	// // default value is used.
	// MaxReadFrameSize uint32

	// // PermitProhibitedCipherSuites, if true, permits the use of
	// // cipher suites prohibited by the HTTP/2 spec.
	// PermitProhibitedCipherSuites bool

	// // IdleTimeout specifies how long until idle clients should be
	// // closed with a GOAWAY frame. PING frames are not considered
	// // activity for the purposes of IdleTimeout.
	// IdleTimeout time.Duration

	// // MaxUploadBufferPerConnection is the size of the initial flow
	// // control window for each connections. The HTTP/2 spec does not
	// // allow this to be smaller than 65535 or larger than 2^32-1.
	// // If the value is outside this range, a default value will be
	// // used instead.
	// MaxUploadBufferPerConnection int32

	// // MaxUploadBufferPerStream is the size of the initial flow control
	// // window for each stream. The HTTP/2 spec does not allow this to
	// // be larger than 2^32-1. If the value is zero or larger than the
	// // maximum, a default value will be used instead.
	// MaxUploadBufferPerStream int32

	// NewWriteScheduler constructs a write scheduler for a connection.
	// If nil, a default scheduler is chosen.
	NewWriteScheduler func() http2WriteScheduler

	// // CountError, if non-nil, is called on HTTP/2 server errors.
	// // It's intended to increment a metric for monitoring, such
	// // as an expvar or Prometheus metric.
	// // The errType consists of only ASCII word characters.
	// CountError func(errType string)

	// // Internal state. This is a pointer (rather than embedded directly)
	// // so that we don't embed a Mutex in this struct, which will make the
	// // struct non-copyable, which might break some callers.
	// state *serverInternalState
}

// ConfigureServer adds HTTP/2 support to a net/http Server.
//
// The configuration conf may be nil.
//
// ConfigureServer must be called before s begins serving.
func http2ConfigureServer(s *Server, conf *http2Server) error {
	return nil
}

// WriteScheduler is the interface implemented by HTTP/2 write schedulers.
// Methods are never called concurrently.
type http2WriteScheduler interface {
}

// PriorityWriteSchedulerConfig configures a priorityWriteScheduler.
type http2PriorityWriteSchedulerConfig struct {
}

// NewPriorityWriteScheduler constructs a WriteScheduler that schedules
// frames by following HTTP/2 priorities as described in RFC 7540 Section 5.3.
// If cfg is nil, default options are used.
func http2NewPriorityWriteScheduler(cfg *http2PriorityWriteSchedulerConfig) http2WriteScheduler {
	ws := &http2priorityWriteScheduler{}
	return ws
}

type http2priorityWriteScheduler struct {
}
